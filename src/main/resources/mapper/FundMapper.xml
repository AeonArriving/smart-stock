<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="smart.stock.mapper.FundMapper">
  <resultMap id="BaseResultMap" type="smart.stock.entity.Fund">
    <id column="id" jdbcType="BIGINT" property="id" />
    <result column="name" jdbcType="VARCHAR" property="name" />
    <result column="banlance" jdbcType="DECIMAL" property="banlance" />
    <result column="principal" jdbcType="DECIMAL" property="principal" />
    <result column="position" jdbcType="DECIMAL" property="position" />
    <result column="total_unit" jdbcType="INTEGER" property="totalUnit" />
    <result column="num_of_trustee" jdbcType="INTEGER" property="numOfTrustee" />
    <result column="create_time" jdbcType="TIMESTAMP" property="createTime" />
    <result column="update_time" jdbcType="TIMESTAMP" property="updateTime" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    id, name, banlance, principal, position, total_unit, num_of_trustee, create_time,
    update_time
  </sql>
  <select id="selectByExample" parameterType="smart.stock.entity.FundExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from fund
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Long" resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List" />
    from fund
    where id = #{id,jdbcType=BIGINT}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
    delete from fund
    where id = #{id,jdbcType=BIGINT}
  </delete>
  <delete id="deleteByExample" parameterType="smart.stock.entity.FundExample">
    delete from fund
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" keyColumn="id" keyProperty="id" parameterType="smart.stock.entity.Fund" useGeneratedKeys="true">
    insert into fund (name, banlance, principal,
      position, total_unit, num_of_trustee,
      create_time, update_time)
    values (#{name,jdbcType=VARCHAR}, #{banlance,jdbcType=DECIMAL}, #{principal,jdbcType=DECIMAL},
      #{position,jdbcType=DECIMAL}, #{totalUnit,jdbcType=INTEGER}, #{numOfTrustee,jdbcType=INTEGER},
      #{createTime,jdbcType=TIMESTAMP}, #{updateTime,jdbcType=TIMESTAMP})
  </insert>
  <insert id="insertSelective" keyColumn="id" keyProperty="id" parameterType="smart.stock.entity.Fund" useGeneratedKeys="true">
    insert into fund
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="name != null">
        name,
      </if>
      <if test="banlance != null">
        banlance,
      </if>
      <if test="principal != null">
        principal,
      </if>
      <if test="position != null">
        position,
      </if>
      <if test="totalUnit != null">
        total_unit,
      </if>
      <if test="numOfTrustee != null">
        num_of_trustee,
      </if>
      <if test="createTime != null">
        create_time,
      </if>
      <if test="updateTime != null">
        update_time,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="name != null">
        #{name,jdbcType=VARCHAR},
      </if>
      <if test="banlance != null">
        #{banlance,jdbcType=DECIMAL},
      </if>
      <if test="principal != null">
        #{principal,jdbcType=DECIMAL},
      </if>
      <if test="position != null">
        #{position,jdbcType=DECIMAL},
      </if>
      <if test="totalUnit != null">
        #{totalUnit,jdbcType=INTEGER},
      </if>
      <if test="numOfTrustee != null">
        #{numOfTrustee,jdbcType=INTEGER},
      </if>
      <if test="createTime != null">
        #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateTime != null">
        #{updateTime,jdbcType=TIMESTAMP},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="smart.stock.entity.FundExample" resultType="java.lang.Long">
    select count(*) from fund
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>

    <update id="updateByExampleSelective" parameterType="map">
    update fund
    <set>
      <if test="record.id != null">
        id = #{record.id,jdbcType=BIGINT},
      </if>
      <if test="record.name != null">
        name = #{record.name,jdbcType=VARCHAR},
      </if>
      <if test="record.banlance != null">
        banlance = #{record.banlance,jdbcType=DECIMAL},
      </if>
      <if test="record.principal != null">
        principal = #{record.principal,jdbcType=DECIMAL},
      </if>
      <if test="record.position != null">
        position = #{record.position,jdbcType=DECIMAL},
      </if>
      <if test="record.totalUnit != null">
        total_unit = #{record.totalUnit,jdbcType=INTEGER},
      </if>
      <if test="record.numOfTrustee != null">
        num_of_trustee = #{record.numOfTrustee,jdbcType=INTEGER},
      </if>
      <if test="record.createTime != null">
        create_time = #{record.createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.updateTime != null">
        update_time = #{record.updateTime,jdbcType=TIMESTAMP},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update fund
    set id = #{record.id,jdbcType=BIGINT},
      name = #{record.name,jdbcType=VARCHAR},
      banlance = #{record.banlance,jdbcType=DECIMAL},
      principal = #{record.principal,jdbcType=DECIMAL},
      position = #{record.position,jdbcType=DECIMAL},
      total_unit = #{record.totalUnit,jdbcType=INTEGER},
      num_of_trustee = #{record.numOfTrustee,jdbcType=INTEGER},
      create_time = #{record.createTime,jdbcType=TIMESTAMP},
      update_time = #{record.updateTime,jdbcType=TIMESTAMP}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="smart.stock.entity.Fund">
    update fund
    <set>
      <if test="name != null">
        name = #{name,jdbcType=VARCHAR},
      </if>
      <if test="banlance != null">
        banlance = #{banlance,jdbcType=DECIMAL},
      </if>
      <if test="principal != null">
        principal = #{principal,jdbcType=DECIMAL},
      </if>
      <if test="position != null">
        position = #{position,jdbcType=DECIMAL},
      </if>
      <if test="totalUnit != null">
        total_unit = #{totalUnit,jdbcType=INTEGER},
      </if>
      <if test="numOfTrustee != null">
        num_of_trustee = #{numOfTrustee,jdbcType=INTEGER},
      </if>
      <if test="createTime != null">
        create_time = #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateTime != null">
        update_time = #{updateTime,jdbcType=TIMESTAMP},
      </if>
    </set>
    where id = #{id,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKey" parameterType="smart.stock.entity.Fund">
    update fund
    set name = #{name,jdbcType=VARCHAR},
      banlance = #{banlance,jdbcType=DECIMAL},
      principal = #{principal,jdbcType=DECIMAL},
      position = #{position,jdbcType=DECIMAL},
      total_unit = #{totalUnit,jdbcType=INTEGER},
      num_of_trustee = #{numOfTrustee,jdbcType=INTEGER},
      create_time = #{createTime,jdbcType=TIMESTAMP},
      update_time = #{updateTime,jdbcType=TIMESTAMP}
    where id = #{id,jdbcType=BIGINT}
  </update>

  <select id="detail" resultType="smart.stock.dto.FundDto">
    SELECT
        id,
        NAME,
        banlance,
        principal,
        position,
        total_unit AS totalunit,
        num_of_trustee AS numOfTrustee,
        create_time AS createTime,
        update_time AS updateTime
    FROM
        fund
    WHERE id = #{id}
  </select>
    <select id="options" resultType="smart.stock.dto.Options">
        SELECT
          id AS value,
          NAME AS text
        FROM
            fund
        ORDER BY name
    </select>
</mapper>
